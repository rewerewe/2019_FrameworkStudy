2019-06-04

■■■ Spring Framework 이해하기 ■■■ 

○ 개요
 
   1. Framework
      어플리케이션을 구현하고 관리하는 환경(틀, 약속)

   2. Spring Framework
      설정 정보(XML)에 의해 어플리케이션을 구성하고,
      객체를 생성하고, 관리하는 주체. 

      (=Spring은 환경을 제공하고, 앱 구현을 도와주는 주체) 
	개발자는 Spring 약속을 잘 지킨(xml) 일감 거리를 주어야 하고, 	
	일을 시킬 수 있으면 된다. 이 방법을 공부하는 것으로 이해하자. 

○ 스프링 프레임워크(Spring Framework)의 개념
   
   스프링은 자바 엔터프라이즈 어플리케이션 개발에 사용되는
   어플리케이션 프레임워크.

   어플리케이션 프레임워크는 어플리케이션 개발을 빠르고 
   효율적으로 할 수 있도록 어플리케이션의 바탕이 되는 틀과 
   공통 프로그래밍 모델, 그리고 API 등을 제공해 준다.
  
   - 어플리케이션의 기본 틀 → 스프링 컨테이너
     
     스프링은 스프링 컨테이너 또는 어플리케이션 컨텍스트 라고 불리는 
     스프링 런타임 엔진을 제공한다.
     스프링 컨테이너는 설정 정보(XML:배치 기술서)를 참고해서
     어플리케이션을 구성하는 오브젝트(객체)를 생성하고 관리한다.
     스프링 컨테이너는 독립적으로 동작할 수 도 있지만
     보통... 웹 모듈에서 동작하는 서비스나 서블릿으로 등록해서 사용한다.

     스프링을 사용하려면 먼저 스프링 컨테이너를 다루는 방법과
     스프링 컨테이너가 어플리케이션 오브젝트를 이용할 수 있도록 
     설정 정보를 작성하는 방법을 알아야 한다.
    
     ==> 설정 정보(XML) 에 의해 어플리케이션을 구성하고
         객체를 생성, 관리하는 주체 

     컨테이너 안에 공장, 회사, 작업장 등 
     많은 개념들이 들어있다고 이해하자. 그만큼 큰 개념이다  
     Container < Ioc Container < Factory ... etc. 
	

   - 공통 프로그래밍 모델 (필수 약속) → Ioc/DI, 서비스 추상화, AOP (약속을 지킬때 Spring이 할 일)

     프레임워크는 어플리케이션을 구성하는 오브젝트(객체)가 
     생성되고 동작하는 방식에 대한 틀을 제공해줄 뿐 인
     어플리케이션 코드가 어떻게 작성되어야 하는지에 대한 기준도 제시한다.
     이런 틀은 보통 프로그래밍 모델이라고 한다.
     스프링은 세 가지 핵심 프로그래밍 모델을 제공한다.

     ① Ioc/DI
        오브젝트 생명주기와 의존관계에 대한 프로그래밍 모델이다.
	스프링은 유연하고 확장성이 뛰어난 코드를 만들 수 있게 도와주는
  	객체 지향 설계 원칙과 디자인 패턴의 핵심 원리를 담고 있는
 	Ioc/DI 를 프레임워크의 핵심 근간으로 삼고 있다.
	스프링 프레임워크에서 동작하는 코드는
	Ioc/DI 방식을 따라 작성되어야 스프링이 제공하는 가치를 제대로 누릴 수 있다.
	스프링이 직접 제공하는 모든 기술과 API, 심지어 컨테이너 까지도
 	Ioc/DI 방식으로 작성되어(만들어져) 있다.
	스프링을 바르게 이해하고 효율적으로 사용하는 데 기본이 되며 가장 중요한 기술이다.
	 
	 ·Ioc → - IoC 컨테이너 : 객체를 등록하고 관리하는 공간. 	== 실제 아래 모든 행위를 하고 있는 일꾼,이라 이해하자 
		  -------------------------------------------------------------------------------------------------------
		  - 객체 관리의 주체.
		  - Inversion of Control : 제어의 역전(역제어)
		  - 객체 생성과 관리를 직접 하는 것이 아니라 
		    (class) 외부(Spring Container || IoC Container)에서 만들어진 오브젝트(객체)를 제공받는 입장이 되는 것.
		             :
		    (class) 내부 instance 생성구문 작성 → (스프링) 외부에서 객체를 생성한다. 
		  -------------------------------------------------------------------------------------------------------
		  - Bean : 스프링이 관리하는 대상. 			== 만들어지는 객체 
		  - Bean Factory : 객체를 관리하는 주체. 		== Bean 을 만들어내는 공장 
		    일반적으로 이 기능을 확장한 Application Context 를 사용하게 된다.	
		  - Application Context : Bean Factory 의 확장 버전	== Application Context => Bean Factory's (공단)  

		  - 설정정보 : 어떤 객체들의 관리 대상인지 설정한 정보.
		    XML, Annotation(해당 객체에게 직접 명시해주는 것. 얼굴 낙서) 등을 이용한다. 객체 의존 관계도 표현되어 있다.
		  -------------------------------------------------------------------------------------------------------

	   Spring Container == IoC Container == IoC
			    in IoC Container 
			    in Factory 
			    in Library 
		 
	
	 ·DI  → - 객체를 관리하는 방법. 
		  - 자바에서 객체를 생성하고 관리하는 방법은 
		    모두 has-a 관계 (A in B instance 생성, 포함관계)를 통해 처리해 왔기 때문에
		    이들은 모두 의존 관계가 치밀하고 밀접한 상황일 수 밖에 없다.
		    때문에... 이러한 강한 결합 상태는 유연성을 떨어뜨리는 결과(너 아녀도 된다)를 초래하게 된다.
		    이러한 결합 상태를 풀어주는 과정(방법)이 바로 DI 이다.
		  ----------------------------------------------------------------------------
		  - Dependency Injection : 의존성 주입(의존관계 주입)
		  - 의존관계 주입 : 의존 객체들...(_인스턴스 객체) 
		    이 객체를 사용하는 객체에...(_필요로 하는 객체=클래스) 외부에서 주입하는 액션(상태)
		  ----------------------------------------------------------------------------
		  - 의존 관계 : A 가 실행되기 위해서 B 를 필요로 하는 상태
		  - 의존 객체 : A 입장에서의 의존 객체는 B (즉, 주입되는 객체)
		  
		  ※ 우선... A 객체에 B 객체의 주소를 넘겨줌으로써 B 객체를 사용하게 된다면...
         	     A 객체는 여전히 B 객체를 사용하는 데는 문제가 없고,
         	     B 객체는 A 객체와의 결합 상태가 느슨해진다고 할 수 있다.       

         	     이 때, 넘겨주는 방법은 생성자 또는 setter( ) 메소드를 이용하는 방법이 있다.

         	     DI 를 위해 객체는 
		     작은 객체부터 생성해서 큰 객체로 DI (의존성 주입) 하게 된다.   	     	

         	     이 때, 완성된 오브젝트(객체)가 만들어질 때까지 
                     객체를 관리할 주체가 필요하게 되는데 
		     (== 만들어진 객체가 소멸되지 않도록 사용? 유지? 하면서 다음 객체가 만들어질때까지 관리하는 것. 
                       = 선생님이 모터를 만들동안 윤비가 나사를 들고 있었듯이)
         	     그 역할을 하는 것이 바로 컨테이너인 것이다. 
		  		 	

     ② 서비스 추상화
        스프링을 사용하면 환경이나 서버, 특정기술에 종속되지 않고
 	이식성이 뛰어나며 유연한 어플리케이션을 만들 수 있게 되는데, 
        이를 가능하게 해주는 것이 바로 서비스 추상화이다.
        구체적인 기술과 환경이 종속되지 않도록 유연한 추상 계층을 두는 방법이다.

	생성객체 → 의존객체
	[ 사람             ]
	   
	   인터페이스 { class scanner }
             ↑
	   추상클래스 { implement() () () () }
             ↑
           특정클래스 { 나이 체중 키 주소 }

     
     ③ AOP (Aspect Oriented Programming)
	이 AOP 는 어플리케이션 코드에 산재해서 나타나는 부가적인 기능을
 	독립적인 상태로 모듈화하는 프로그래밍 모델이다.
	스프링은 AOP 를 이용해서 다양한 엔터프라이즈 서비스를
 	적용하고도 깔끔한 코드를 유지할 수 있게 해준다. 

	[ ㅡ ㅡ ㅡ ㅡ ]   		 ㅡ 		ㅡ 
	  ■ ◈ ◎ ♧	  →	■ ◈ ◎ ♧	           ← ■ ( ◈ ◎ ♧ )
   	[ ㅡ ㅡ ㅡ ㅡ ]  	 	 ㅡ 		ㅡ 
	  					        --------------------
						 	이 개념이 AOP.

   - 기술 API 
     
     스프링은 엔터프라이즈 어플리케이션 개발의 다양한 영역에
     바로 활용될 수 있는 방대한 양의 기술 API 를 제공한다.
     UI 작성은 물론이고, 웹 프리젠테이션 계층, 비즈니스 서비스 계층,
     기반 서비스 계층, 도메인 계층, 데이터 액세스 계층 등에서
     필요한 주요 기술을 스프링에서 일관된 방식으로 사용할 수 있도록
     지원해주는 전략 클래스를 제공한다.

     스프링이 제공하는 API 와 지원 기술은 모두 스프링 프로그래밍 모델에 따라
     작성되었기 때문에 이를 가져다 쓰는 것만으로도
     스프링 프로그래밍 모델을 코드에 자연스럽게 적용할 수 있다.
     스프링의 모든 기술은 표준 자바 엔터프라이즈 플랫폼(JavaEE) 에 기술을 두고 있다.
     표준 기술과 
     더불어 오픈소스 기술과 주요 상용 기술에 대한 지원 기능도 다양하게 제공된다.

○ 스프링 프레임워크(Spring Framework)의 주요 기능과 특징

   1. 경량 컨테이너
      자바 객체를 담고, 이들 자바 객체의 생성과 소멸의 라이프 사이클을 관리.
  
   2. DI (Dependency Injection)
      의존성(_관계) 주입(_삽입)을 지원. 
      설정 파일을 통해 객체간의 의존 관계를 정의.

   3. AOP (Aspect Oriented Programming) 지원
      관점 지향 프로그래밍을 지원.      
      여러 모듈에 공통적으로 쓰이는 기능을 분리하여 각 모듈에 적용하는 것이 가능.

   4. POJO(Plane Old Java Object) 지원
      가장 기본적인 자바 객체를 지원하여 기존 작성 코드의 유지성을 향상.
      → 보통의 자바(빈) 객체. 
	 - 상속(X)
	 - 인터페이스 (X)

   5. 트랜잭션 처리
      JDBC 나 JTA 를 사용하여 설정 파일을 통해
      트랜잭션을 관리하여 동일한 코드를 여러 환경에서 사용하도록 하는 것이 가능.

   6. 다양한 프레임워크와 조합
      myBatis(iBatis), Hivernate, Struts, Struts2, JPA, JDO, JMS, Quartz 등
      다른 프레임워크 뿐 아니라 사용자가 만든 프레임워크와의 연동성을 제공한다.

※ 스프링 프레임워크(Spring Framework) 에서 가장 중요한 개념

   - DI (Depentency Injection, 의존성 주입, 의존관계 주입)
     : 객체를 생성하고 관리하는 의존성에 대해서
       어떻게 처리하는가에 대한 개념.

   - IoC (Inversion of Control, 제어의 역전)
     : 인스턴스의 생성부터 소멸까지의 인스턴스 생명 주기 관리를
       컨테이너가 대신하는 개념.


----------------------------------------------------------------------------------


2019-06-05

■■■ IoC/DI 실습 01 ■■■

※ 스프링 프레임워크 없이 IoC/DI 개념 실습

○ 실습 성격 및 주요 사항
   1. 콘솔 프로젝트
   2. 성적 처리
      국어, 영어, 수학 점수를 입력받아 총점, 평균을 출력하는 프로그램

○ 물리적 파일 구성
   1. Record.java	  	→ 인터페이스
   2. RecordView.java		→ 인터페이스
   3. RecordImp1.java 		→ 클래스
   4. RecordImp2.java 		→ 클래스
   5. RecordViewImp1.java 	→ 클래스
   6. Main.java 		→ 클래스. main() 메소드가 포함된 테스트 클래스.

각 클래스, 인터페이스 관계를 파악하는 것이 중요합니다. 
(▶실습 후에 정리해두기)


----------------------------------------------------------------------------------


■■■ IoC/DI 실습 02 ■■■

※ 스프링 프레임워크 없이 IoC/DI 개념 실습

○ 실습 환경 구성
   → 스프링 자원을 활용할 수 있는 환경 구성

   1. 프로젝트명 마우스 우클릭 (프로젝트이름에서 마우스 오른쪽 클릭)
   2. Build Path > Configure Build Path.. 메뉴 선택
   3. Libraies 탭 선택 > Add External JARs.. 버튼 클릭
   4. 필요한 jar 파일을 해당 프로젝트에 외부 라이브러리로 등록 

      - 경로1 : C:\s-f-3.0-with-docs-dist
        · 파일1 : org.springframework.asm-3.0.2.RELEASE.jar
        · 파일2 : org.springframework.beans-3.0.2.RELEASE.jar
        · 파일3 : org.springframework.context-3.0.2.RELEASE.jar
        · 파일4 : org.springframework.core-3.0.2.RELEASE.jar
        · 파일5 : org.springframework.expression-3.0.2.RELEASE.jar

      - 경로2 : C:\s-f-3.0.2.-dependencies
		\org.apache.commons
		\com.springsource.org.apache.commons.logging\1.1.1
        · 파일6 : com.springsource.org.apache.commons.logging-1.1.1.jar

   5. 스프링 프레임워크의 환경 설정 파일을 XML 형식으로 생성
      현재 실습 환경에서의 파일 이름은 사용자가 임의로 부여하여 생성하는 것이 가능.
      → 『applicationContext.xml』
   6. 생성한 applicationContext.xml 파일에
      스프링이 참조하게 될 객체에 대한 정보와 DI 설정을 추가.
      - 참조 경로 : C:\s-f-3.0.2.-with-docs
		    \spring-framework-3.0.2.RELEASE\docs\spring-framework-reference\htmlsingle
        ·참조 파일 : spring-framework-reference.html
        ·참조 위치 : III. Core Technologies
			3.2.1. Configuration metadata
      → 해당 위치의 xml 샘플 파일 내용을 복사하여 applicationContext.xml 에 붙여 넣기 


○ 실습 성격 및 주요 사항

   1. 콘솔 프로젝트
   2. 성적 처리
      국어, 영어, 수학 점수를 입력받아 총점, 평균을 출력하는 프로그램


○ 물리적 파일 구성

   1. Record.java	  	→ 인터페이스	→ 기존 소스코드 활용
   2. RecordView.java		→ 인터페이스	→ 기존 소스코드 활용
   3. RecordImp1.java 		→ 클래스	→ 기존 소스코드 활용
   4. RecordImp2.java 		→ 클래스	→ 기존 소스코드 활용
   5. RecordViewImp1.java 	→ 클래스	→ 기존 소스코드 활용
   6. Main.java 		→ (Ⅹ) 클래스. main() 메소드가 포함된 테스트 클래스.   
				→ (○) 수정
   7. applicationContext.xml	→ 프로젝트 > src 폴더 하위에 생서
 				   (파일 이름은 임의로 지정 가능 )
   


각 클래스, 인터페이스 관계를 파악하는 것이 중요합니다. 
(▶실습 후에 정리해두기)

----------------------------------------------------------------------------------


■■■ IoC/DI 실습 03 ■■■

※ 스프링 프레임워크 없이 IoC/DI 개념 실습

○ 실습 성격 및 주요 사항
   1. 콘솔 프로젝트
   2. 성적 처리
      국어, 영어, 수학 점수를 입력받아 총점, 평균을 출력하는 프로그램 + 이름 전화번호 주소 



파일 > 클래스 > 인터페이스 > implement > 의존성 주입 - 관계 

R.c
RV.c
main.c

유연해지게=결합력이 느슨해지게... 만든이유는? class 파일 수정없이 xml 파일 수정이 용이하기 때문에 

----------------------------------------------------------------------------------

■■■ IoC/DI 실습 03 ■■■

※ 스프링 프레임워크 없이 IoC/DI 개념 실습, 강한 결합

○ 실습 성격 및 주요 사항
   1. 콘솔 프로젝트
   2. 데이터베이스 연동 프로젝트 구성
   3. 오라클 암호화 / 복호화 적용 
  
○ 물리적 파일 구성
   1. SpringPrj03_scott.sql 	→ 데이터베이스 관련 준비
   2. MemberDTO.java		→ TBL_MEMBERLIST 테이블 레코드 참조
   3. OracleDAO.java 		→ DAO 역할 → 실습 진행간에는 계정 설정만 다르게 연결.
   4. MssqlDAO.java		→ DAO 역할 → 실습 진행간에는 계정 설정만 다르게 연결.
				   [ 하나는 나의 오라클 서버, 하나는 파트너의 mssql 서버 ]
   5. MemberList.java 		→ DAO 클래스를 참조하는 클래스.
				→ 의존관계 설정. print() 메소드 구현.
				   [ SpringFrame Work 에서는 이 강한 결합 관계를 느슨하게 풀 예정.	
				     각기 다른 서버에 접속, 다른 조회 결과값을 얻으려고 2개로 구성 ]
   6. Main.java			→ main() 메소드를 포함하는 테스트 클래스	

각 클래스, 인터페이스 관계를 파악하는 것이 중요합니다. 
(▶실습 후에 정리해두기)

----------------------------------------------------------------------------------

암호화
본래의 데이터가 알아볼 수 없는 데이터 형태로 저장되는 것
특정 알고리즘이 적용되서 다른 데이터 형태로 저장되어 있는 상황

진윤비 010-1232-2342

테이블에 접근할 수 있는 사람들(인증키 가진 사람들)만 윤비 전화번호를 알 수 있다.

반대로 복호화는 
복호키로 본래의 데이터 형태로 복원하는 것.

----------------------------------------------------------------------------------

■■■ IoC/DI 실습 04 ■■■

※ 스프링 프레임워크 없이 IoC/DI 개념 실습.

○ 실습 성격 및 주요 사항
   1. 콘솔 프로젝트
   2. 데이터베이스 연동 프로젝트 구성
   3. 오라클 암호화 / 복호화 적용 
  
○ 물리적 파일 구성
   1. SpringPrj04_scott.sql 	→ 데이터베이스 관련 준비
   2. MemberDTO.java		→ TBL_MEMBERLIST 테이블 레코드 참조
   3. OracleDAO.java 		→ DAO 역할 → 실습 진행간에는 계정 설정만 다르게 연결.
   4. MssqlDAO.java		→ DAO 역할 → 실습 진행간에는 계정 설정만 다르게 연결.
				   [ 하나는 나의 오라클 서버, 하나는 파트너의 mssql 서버 ]
   5. MemberList.java 		→ DAO 클래스를 참조하는 클래스.
				→ 의존관계 설정. print() 메소드 구현.
				   [ SpringFrame Work 에서는 이 강한 결합 관계를 느슨하게 풀 예정.	
				     각기 다른 서버에 접속, 다른 조회 결과값을 얻으려고 2개로 구성 ]
   6. Main.java			→ main() 메소드를 포함하는 테스트 클래스	

○ 추가 파일
   7. IDAO.java			→ 인터페이스
   8. ApplicationContext.xml	→ 스프링 환경 설정 파일.
				→ 객체 생성 구문 및 DI 설정 구문 구성.

※ 라이브러리 등록
   - 경로 1 : C:\s-f-3.0.2.-with-docs\spring-framework-3.0.2.RELEASE\dist
	·파일 1 : org.springframework.asm-3.0.2.RELEASE.jar
	·파일 2 : org.springframework.beans-3.0.2.RELEASE.jar
	·파일 3 : org.springframework.context-3.0.2.RELEASE.jar
	·파일 4 : org.springframework.core-3.0.2.RELEASE.jar
	·파일 5 : org.springframework.core-3.0.2.RELEASE.jar

   - 경로 2 : C:\s-f-3.0.2.-dependencies\org.apache.commons
		\com.springsource.org.apache.commons.logging
	·파일 6 : com.springsource.org.apache.commons.logging-1.1.1.jar

   - 경로 3 : C:\oraclexe\app\oracle\product\11.2.0\server\jdbc\lib 
	·파일 7 : ojdbc6.jar


----------------------------------------------------------------------------------

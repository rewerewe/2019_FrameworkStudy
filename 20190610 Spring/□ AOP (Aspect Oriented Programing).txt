■■■ AOP (Aspect Oriented Programing) ■■■

※ 공통의 관심사항을 적용해서 발생하는 의존관계의 복잡성과 
   코드 중복을 해소해 주는 프로그래밍 기법.

○ AOP 개념
   주 업무를 실행할 때 보조적인 업무(주 업무 실행시간 체크, 로그기록 등)가 
   진행되어야 한다.
   만약, 주 업무가 여러개이고, 동일한 보조 업무의 수행이 진행되어야 한다면
   보조 업무부분은 중복된 코드가 될 수 밖에 없다.
   이런 중복 요소를 제거하고 업무를 보다 독립적인 방법으로 실행할 수 있도록
   구성하는 것을 AOP 기법이라고 한다.
  
○ AOP 관련 주요 용어 (※ 교재에서 추가로 확인할 것)
   - 보조 업무 (cross-cutting concern)
     주 업무 실행 시 발생하는 보조적인 업무.
     주 업무와 분리 및 결합이 쉽게 이루어질 수 있도록 만들어야 한다.
   - 주 업무 (core concern)
     핵심적인 기능을 수행하는 부분.
     사용자의 요청에 대한 기본적인 수행 및 결과 반환을 해야 한다.
   - Advice
     언제 어떤 공통 관심 기능(보조 업무, cross-cutting concenrn)을 적용할지
     결정하는 방법.
     Before Advice, After Advice, Around Advice 등이 있다
     ·Before Advice
       보조 업무가 주 업무 실행 전에 실행되는 경우
     ·After Advice
       보조 업무가 주 업무 실행 후에 실행되는 경우
     ·Around Advice
       보조 업무가 주 업무 실행 전과 후에 실행되는 경우

   - proxy
     주 업무를 실행하는 객체와 동일한 모양을 가진 가짜 객체.
     사용자가 주 업무를 실행하는 객체를 찾아가는 것이 아니라,
     proxy 를 찾아가도록 지정하게 된다.
     proxy 내부에서 보조업무를 실행한 후, 주 업무를 호출하도록 하면
     외부에서 볼때 주 업무를 실행하는 것과 같은 결과가 나오도록 할 수 있다.
   - joinpoint
     proxy 내부에서 주 업무를 호출하는 경우 특정 지점에만 호출되도록 할 수 있다.
   - weaving 
     advice 를 주 업무에 적용하는 과정을 부르는 명칭.
   - aspect 
     여러 주 업무 객체에 공통으로 적용되는 공통 관심 사항(보조 업무)을 
     aspect 라고 한다.

○ AOP 진행 순서
   
     사용자 	프록시		보조 업무 			주 업무
     (client)	(proxy)		(cross-cutting concern)		(core concern)

     ○----------------------------------------------------------->○

     ●----①----->●

		   ●-------②------->●  Before Advice

		   ●-----------------③-------------------------->●

		   ●<----------------④---------------------------●

		   ●-------⑤------->●  After Advice

     ○<------------------------------------------------------------○

     ●<----⑥-----●


     ① 사용자는 proxy 객체에 접근한다.
        사용자 입장에서는 proxy 객체가 주 업무(core concern) 객체와 동일하게 생각한다.

     ② proxy 객체 내부에서 보조 업무(cross-cutting concern)를 진행하게 된다.
        주 업무 실행 전에 실행되는 보조 업무는
        Before Advice, Around Advice 가 있다.

     ③ proxy 객체 내부에서 주 업무(core concern) 를 호출한다.
        주 업무가 진행된다.

     ④ 주 업무가 결과값을 리턴한다.
   
     ⑤ proxy 객체 내부에서 보조 업무(cross-cutting concern) 를 진행하게 된다.
        주 업무 실행 후에 실행되는 보조 업무는
        After Advice, Around Advice 가 있다.

     ⑥ 사용자에게 결과값을 리턴한다.


 1.
	(1)
      --------------
		♡♡♡♡♡	- 주 업무 실행 전 보조업무 (3)

		   □□□□□
		   □□□□□	- 주 업무 
		   □□□□□

     	   ♣♣♣♣♣	- 주 업무 실행 후 보조업무 (4)
      --------------

 2. 

	◆◆◆◆◆	▼▼▼▼▼	▷▷▷▷▷	◎◎◎◎◎
	◆◆◆◆◆	▼▼▼▼▼	▷▷▷▷▷	◎◎◎◎◎
	◆◆◆◆◆	▼▼▼▼▼	▷▷▷▷▷	◎◎◎◎◎

	    ↑

 	사용자가 요청하는 서비스 일때,
	(2) 와 같이 구성되어 되어야 하지만, proxy 가 (1) 처럼 처리한다.   
	우리는 지금까지 주 업무를 주축으로 보조업무 (3),(4)를 메소드, 객체형태로 구성한 다음
	호출해서 사용해왔다. 
	그런데 단순하지 않음 업무(즉, 엔터프라이즈 급)를 수행하는 과정에서는 
 	업무가 복잡해지고, 많아지는 상황에서는 메소드 호출형태로 업무를 처리하는게 더 복잡해진다. 
	그래서 (5)의 형태로 틀을 구성해 두고, 요청받은 서비스를 더하는 방식을 사용한다. 

 3.

	(2)
      --------------	--------------	--------------	--------------

		◆◆◆◆◆	  			▼▼▼▼▼	 	 ▷▷▷▷▷	  		◎◎◎◎◎
		◆◆◆◆◆	  			▼▼▼▼▼	 	 ▷▷▷▷▷	  		◎◎◎◎◎
		◆◆◆◆◆	  			▼▼▼▼▼	  	 ▷▷▷▷▷	  		◎◎◎◎◎
	
      --------------	--------------	--------------	--------------

 4. 

	(5) proxy : 주 업무를 넘겨주어 처리할 수 있게 해준다. → 리소스 단순화, 관리 용이해짐.
      --------------		--------------
		♡♡♡♡♡	

								◆◆◆◆◆
			+ 					◆◆◆◆◆	
								◆◆◆◆◆

     	♣♣♣♣♣
      --------------		--------------
